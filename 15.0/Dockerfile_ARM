# To build run command
# docker buildx build -f Dockerfile_ARM --platform linux/arm64 -t pandoo/odoo:15.0-arm64 . --no-cache
FROM --platform=linux/arm64 debian:bullseye-slim
LABEL maintainer="Mastercore Sinapsys Global <far@sinapsys.global>"

SHELL ["/bin/bash", "-xo", "pipefail", "-c"]

# Generate locale C.UTF-8 for postgres and general locale data
ENV LANG C.UTF-8

# Install some deps, lessc and less-plugin-clean-css, and wkhtmltopdf
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        openssl \
        libsasl2-dev \
        python3-dev \
        libldap2-dev \
        ca-certificates \
        curl \
        dirmngr \
        fonts-noto-cjk \
        gnupg \
        libssl-dev \
        node-less \
        npm \
        git \
        gcc \
        g++ \
        swig \
        python3-dev \
        python3-wheel \
        file \
        libev-dev \
        mc \
        locate \
        python3-gevent \
        python3-num2words \
        python3-pdfminer \
        python3-pip \
        python3-phonenumbers \
        python3-pyldap \
        python3-qrcode \
        python3-renderpm \
        python3-setuptools \
        python3-slugify \
        python3-vobject \
        python3-watchdog \
        python3-xlrd \
        python3-xlwt \
        xz-utils \
    && curl -o wkhtmltox.deb -sSL https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox_0.12.6-1.buster_arm64.deb \
    && echo '43d0db99ab0e6b5f60b465a49c764c50d6b31337 wkhtmltox.deb' | sha1sum -c - \
    && apt-get install -y --no-install-recommends ./wkhtmltox.deb \
    && rm -rf /var/lib/apt/lists/* wkhtmltox.deb

# install latest postgresql-client
RUN echo 'deb http://apt.postgresql.org/pub/repos/apt/ bullseye-pgdg main' > /etc/apt/sources.list.d/pgdg.list \
    && GNUPGHOME="$(mktemp -d)" \
    && export GNUPGHOME \
    && repokey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8' \
    && gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "${repokey}" \
    && gpg --batch --armor --export "${repokey}" > /etc/apt/trusted.gpg.d/pgdg.gpg.asc \
    && gpgconf --kill all \
    && rm -rf "$GNUPGHOME" \
    && apt-get update  \
    && apt-get install --no-install-recommends -y postgresql-client \
    && rm -f /etc/apt/sources.list.d/pgdg.list \
    && rm -rf /var/lib/apt/lists/*

# Install rtlcss
RUN npm install -g rtlcss

# Installing l10n_* python requirements
COPY ./requirements.txt /
RUN pip3 install -r /requirements.txt \
        && rm -rf /root/.cache/pip \
        && rm /requirements.txt

# Install Odoo on git way
ENV ODOO_VERSION 15.0
RUN adduser --system --group --home /home/odoo --shell /bin/bash odoo
USER odoo
RUN cd && git clone --depth 1 --branch ${ODOO_VERSION} https://github.com/odoo/odoo
USER root
ENV PATH "$PATH:/home/odoo/odoo"

# Copy entrypoint script and Odoo configuration file
COPY ./entrypoint.sh /
COPY ./odoo.conf /etc/odoo/

# Set permissions and mount /var/lib/odoo to allow restoring filestore and /mnt/extra-addons for users addons
RUN chown odoo /etc/odoo/odoo.conf \
    && mkdir -p /mnt/extra-addons \
    && chown -R odoo /mnt/extra-addons \
    && mkdir -p /usr/local/lib/python3.7/dist-packages/pyafipws/cache \
    && chown -R odoo /usr/local/lib/python3.7/dist-packages/pyafipws \
    && mkdir -p /var/lib/odoo \
    && chown -R odoo /var/lib/odoo \
    && mkdir -p /var/log/odoo \
    && chown -R odoo /var/log/odoo \
    && touch /var/log/odoo/odoo.log \
    && chown -R odoo /var/log/odoo \
    && mkdir -p /usr/share/GeoIP

VOLUME ["/var/lib/odoo", "/mnt/extra-addons"]

# Expose Odoo services
EXPOSE 8069 8071 8072

# Set the default config file
ENV ODOO_RC /etc/odoo/odoo.conf

COPY wait-for-psql.py /usr/local/bin/wait-for-psql.py
COPY GeoLite2-City.mmdb /usr/share/GeoIP/GeoLite2-City.mmdb

# Set default user when running the container
USER odoo

ENTRYPOINT ["/entrypoint.sh"]
CMD ["odoo-bin"]
